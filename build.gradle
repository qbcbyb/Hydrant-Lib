// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        mavenLocal()
        maven { url "http://localhost:8081/nexus/content/groups/public/" }
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'signing'

    repositories {
        mavenLocal()
        maven { url "http://localhost:8081/nexus/content/groups/public/" }
        jcenter()
    }
    group = POM_GROUPID
    version = POM_VERSION

    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url:"https://oss.sonatype.org/service/local/staging/deploy/maven2/"){
                    authentication(userName: OSS_USERID, password: OSS_PASSWORD)
                }
                snapshotRepository(url:"https://oss.sonatype.org/content/repositories/snapshots/"){
                    authentication(userName: OSS_USERID, password: OSS_PASSWORD)
                }

//                repository(url: "http://localhost:8081/nexus/content/repositories/releases") {
//                    authentication(userName: "deployment", password: "deployment123")
//                }
//                snapshotRepository(url: "http://localhost:8081/nexus/content/repositories/snapshots/") {
//                    authentication(userName: "deployment", password: "deployment123")
//                }

//                pom.groupId = 'com.github.qbcbyb'
//                pom.version = '1.0.0'
                pom {
                    artifactId = project.name
                    project {
                        name project.name
//                    packaging POM_PACKAGING
                        description project.name
                        url 'https://github.com/qbcbyb/Hydrant-Lib'

                        parent {
                            groupId 'org.sonatype.oss'
                            artifactId 'oss-parent'
                            version '7'
                        }

                        scm {
                            url 'https://github.com/qbcbyb/Hydrant-Lib'
                            connection 'scm:git:git://github.com/qbcbyb/Hydrant-Lib.git'
                            developerConnection 'scm:git:git@github.com:qbcbyb/Hydrant-Lib.git'
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'hydrant'
                                name 'Hydrant'
                                email 'qbcbyb@gmail.com'
                            }
                        }
                    }
                }
            }
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign } && ext.isReleaseVersion) {
        // Use Java 6's console to read from the console (no good for
        // a CI environment)
        Console console = System.console()
        console.printf "\n\nWe have to sign some things in this build." +
                "\n\nPlease enter your signing details.\n\n"

//        def id = console.readLine("PGP Key Id: ")
//        def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
        def password = console.readPassword("PGP Private Key Password: ")

//        allprojects { ext."signing.keyId" = id }
//        allprojects { ext."signing.secretKeyRingFile" = file }
        allprojects { ext."signing.password" = password }

        console.printf "\nThanks.\n\n"
    }
}